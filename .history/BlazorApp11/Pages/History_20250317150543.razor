@page "/history"
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<PageTitle>Search History</PageTitle>

<div class="history-container">
    <div class="content-overlay">
        <h1 class="title">📜 Search History</h1>

        @if (isLoading)
        {
            <p class="loading">Loading history...</p>
        }
        else if (searchHistory.Any())
        {
            <div class="history-list">
                @foreach (var entry in searchHistory.OrderByDescending(h => h.SearchTime))
                {
                    <div class="history-card">
                        <div class="history-header">
                            <h2 class="city-name">@entry.City</h2>
                            <p class="search-time">@entry.SearchTime.ToString("MMM dd, yyyy HH:mm")</p>
                        </div>
                        <div class="weather-details">
                            <p class="temp">@entry.Temp°C</p>
                            <p class="weather">@entry.Weather</p>
                            <p>Feels Like: @entry.FeelsLike°C</p>
                            <p>Humidity: @entry.Humidity%</p>
                            <p>Wind: @entry.WindSpeed m/s</p>
                            <p>Pressure: @entry.Pressure hPa</p>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="no-history">No search history available yet.</p>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert error">@errorMessage</div>
        }
    </div>
</div>

<style>
    .history-container {
        position: relative;
        min-height: 100vh;
        background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
        overflow-y: auto;
    }

    .content-overlay {
        position: relative;
        z-index: 1;
        padding: 40px;
        max-width: 800px;
        margin: 0 auto;
    }

    .title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #ecf0f1;
        text-align: center;
        margin-bottom: 40px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .history-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .history-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .history-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);
    }

    .history-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        border-bottom: 1px solid #dfe6e9;
        padding-bottom: 10px;
    }

    .city-name {
        font-size: 1.6rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .search-time {
        font-size: 1rem;
        color: #7f8c8d;
        font-style: italic;
    }

    .weather-details {
        font-size: 1rem;
        color: #34495e;
        line-height: 1.6;
    }

    .temp {
        font-size: 1.8rem;
        font-weight: 700;
        color: #e74c3c;
        margin-bottom: 10px;
    }

    .weather {
        font-size: 1.2rem;
        color: #2980b9;
        text-transform: capitalize;
        margin-bottom: 10px;
    }

    .weather-details p {
        margin: 5px 0;
    }

    .loading {
        text-align: center;
        font-size: 1.2rem;
        color: #ecf0f1;
        animation: pulse 1.5s infinite;
    }

    .no-history {
        text-align: center;
        font-size: 1.2rem;
        color: #bdc3c7;
        margin-top: 20px;
    }

    .alert {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 10px;
        color: #fff;
        background: #c0392b;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        animation: fadeIn 0.5s ease;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    private List<SearchHistoryEntry> searchHistory = new();
    private string errorMessage = "";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadHistory();
    }

    private async Task LoadHistory()
    {
        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            // Load from local storage
            searchHistory = await LocalStorage.GetItemAsync<List<SearchHistoryEntry>>("searchHistory") ?? new List<SearchHistoryEntry>();

            // Optionally sync with server (if you have an API endpoint)
            try
            {
                var serverHistory = await Http.GetFromJsonAsync<List<SearchHistoryEntry>>("http://localhost:5188/api/SearchHistory") ?? new List<SearchHistoryEntry>();
                searchHistory = searchHistory.Union(serverHistory, new SearchHistoryComparer()).ToList();
                await LocalStorage.SetItemAsync("searchHistory", searchHistory);
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to sync with server: {ex.Message}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading history: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class SearchHistoryEntry
    {
        public string City { get; set; } = "";
        public double Temp { get; set; }
        public string Weather { get; set; } = "";
        public double FeelsLike { get; set; }
        public int Humidity { get; set; }
        public double WindSpeed { get; set; }
        public int Pressure { get; set; }
        public DateTime SearchTime { get; set; }
    }

    private class SearchHistoryComparer : IEqualityComparer<SearchHistoryEntry>
    {
        public bool Equals(SearchHistoryEntry? x, SearchHistoryEntry? y)
        {
            return x?.City == y?.City && x?.SearchTime == y?.SearchTime;
        }

        public int GetHashCode(SearchHistoryEntry obj)
        {
            return HashCode.Combine(obj.City, obj.SearchTime);
        }
    }
}