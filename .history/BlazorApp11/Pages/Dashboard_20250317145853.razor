@page "/dashboard"
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>Weather Dashboard</PageTitle>

<div class="dashboard-container">
    <div class="content-overlay">
        <h1 class="title">üåç Weather Dashboard üåé</h1>
        
        @if (isLoading)
        {
            <p class="loading">Loading dashboard...</p>
        }
        else if (topCitiesWeather.Any())
        {
            <div class="cities-grid">
                @foreach (var city in topCitiesWeather)
                {
                    <div class="city-card">
                        <h2 class="city-name">@city.City</h2>
                        <p class="city-temp">@city.Temp¬∞C</p>
                        <p class="city-weather">@city.Weather</p>
                        <div class="city-details">
                            <p>Humidity: @city.Humidity%</p>
                            <p>Wind: @city.WindSpeed m/s</p>
                            <p>Pressure: @city.Pressure hPa</p>
                        </div>
                    </div>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert error">@errorMessage</div>
        }
    </div>
</div>

<style>
    .dashboard-container {
        position: relative;
        min-height: 100vh;
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        overflow: hidden;
    }

    .content-overlay {
        position: relative;
        z-index: 1;
        padding: 40px;
        max-width: 1400px;
        margin: 0 auto;
    }

    .title {
        font-size: 2.8rem;
        font-weight: 800;
        color: #ffffff;
        text-align: center;
        margin-bottom: 40px;
        text-shadow: 0 3px 6px rgba(0, 0, 0, 0.4);
    }

    .cities-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
        padding: 20px;
    }

    .city-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        padding: 25px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .city-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 25px rgba(0, 0, 0, 0.25);
    }

    .city-name {
        font-size: 1.8rem;
        font-weight: 700;
        color: #1e3c72;
        margin-bottom: 10px;
    }

    .city-temp {
        font-size: 2.2rem;
        font-weight: 800;
        color: #e91e63;
        margin: 10px 0;
    }

    .city-weather {
        font-size: 1.2rem;
        color: #546e7a;
        text-transform: capitalize;
        margin-bottom: 15px;
    }

    .city-details {
        font-size: 1rem;
        color: #78909c;
        line-height: 1.6;
    }

    .city-details p {
        margin: 5px 0;
    }

    .loading {
        text-align: center;
        font-size: 1.5rem;
        color: #ffffff;
        animation: pulse 1.5s infinite;
    }

    .alert {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 10px;
        color: #fff;
        background: #d81b60;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        animation: fadeIn 0.5s ease;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    private List<TopCityWeather> topCitiesWeather = new();
    private string errorMessage = "";
    private bool isLoading = false;
    private const string ApiKey = "027e44160659370f158944e22e8f23aa";
    private readonly string[] topCities = { "New York", "London", "Tokyo", "Sydney", "Paris" };

    protected override async Task OnInitializedAsync()
    {
        await LoadTopCitiesWeather();
    }

    private async Task LoadTopCitiesWeather()
    {
        isLoading = true;
        errorMessage = "";
        topCitiesWeather.Clear();
        StateHasChanged();

        try
        {
            foreach (var topCity in topCities)
            {
                try
                {
                    var response = await Http.GetStringAsync($"https://api.openweathermap.org/data/2.5/weather?q={topCity}&appid={ApiKey}&units=metric");
                    var json = System.Text.Json.JsonDocument.Parse(response);
                    var cityName = json.RootElement.GetProperty("name").GetString();
                    var temp = json.RootElement.GetProperty("main").GetProperty("temp").GetDouble();
                    var weatherDesc = json.RootElement.GetProperty("weather")[0].GetProperty("description").GetString();
                    var humidity = json.RootElement.GetProperty("main").GetProperty("humidity").GetInt32();
                    var windSpeed = json.RootElement.GetProperty("wind").GetProperty("speed").GetDouble();
                    var pressure = json.RootElement.GetProperty("main").GetProperty("pressure").GetInt32();

                    topCitiesWeather.Add(new TopCityWeather
                    {
                        City = cityName!,
                        Temp = temp,
                        Weather = weatherDesc!,
                        Humidity = humidity,
                        WindSpeed = windSpeed,
                        Pressure = pressure
                    });
                }
                catch (Exception)
                {
                    // Skip failed cities silently
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class TopCityWeather
    {
        public string City { get; set; } = "";
        public double Temp { get; set; }
        public string Weather { get; set; } = "";
        public int Humidity { get; set; }
        public double WindSpeed { get; set; }
        public int Pressure { get; set; }
    }
}