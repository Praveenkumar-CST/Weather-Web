@page "/dashboard"
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>Weather Dashboard</PageTitle>

<div class="dashboard-wrapper">
    <header class="dashboard-header">
        <h1>Weather Dashboard</h1>
        <span class="globe-emoji">üåé</span>
    </header>

    <main class="dashboard-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Loading weather data...</p>
            </div>
        }
        else if (topCitiesWeather.Any())
        {
            <div class="weather-grid">
                @foreach (var city in topCitiesWeather)
                {
                    <div class="weather-card">
                        <div class="card-header">
                            <h2>@city.City</h2>
                            <span class="temp">@city.Temp.ToString("N2")¬∞C</span>
                        </div>
                        <div class="card-body">
                            <p class="weather-desc">@city.Weather</p>
                            <div class="weather-stats">
                                <span>üíß Humidity: @city.Humidity%</span>
                                <span>üí® Wind: @city.WindSpeed m/s</span>
                                <span>‚è≤ Pressure: @city.Pressure hPa</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <p>No weather data available</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-alert">
                <span>‚ö†Ô∏è @errorMessage</span>
                <button @onclick="() => errorMessage = ''">√ó</button>
            </div>
        }
    </main>
</div>

<style>
    .dashboard-wrapper {
        min-height: 100vh;
        background: linear-gradient(145deg, #2c3e50 0%, #3498db 100%);
        padding: 2rem;
    }

    .dashboard-header {
        text-align: center;
        margin-bottom: 2rem;
        position: relative;
    }

    .dashboard-header h1 {
        color: #ffffff;
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .globe-emoji {
        font-size: 2rem;
        position: absolute;
        top: -12px;
        right: 50%;
        transform: translateX(50%);
    }

    .weather-grid {
        display: flex;
        justify-content: center;
        gap: 1rem;
        max-width: 1500px;
        margin: 0 auto;
        flex-wrap: nowrap;
        padding: 0 1rem;
    }

    .weather-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 10px;
        width: 100%;
        max-width: 220px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
        overflow: hidden;
        border-left: 4px solid #3498db; /* Blue border */
    }

    .weather-card:hover {
        transform: translateY(-4px);
    }

    .card-header {
        padding: 0.8rem;
        background: #3498db; /* Blue header */
        color: #ffffff;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-header h2 {
        font-size: 1.2rem;
        margin: 0;
        font-weight: 600;
    }

    .temp {
        font-size: 1.4rem;
        font-weight: 700;
    }

    .card-body {
        padding: 0.8rem;
    }

    .weather-desc {
        color: #666;
        font-size: 0.9rem;
        text-transform: capitalize;
        margin: 0 0 0.6rem 0;
        font-weight: 500;
    }

    .weather-stats {
        font-size: 0.85rem;
        color: #444;
        line-height: 1.4;
    }

    .weather-stats span {
        display: block;
        margin: 0.2rem 0;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
        color: #ffffff;
        margin: 3rem auto;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .empty-state {
        text-align: center;
        color: #ffffff;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 8px;
        margin: 2rem auto;
        max-width: 400px;
    }

    .error-alert {
        position: fixed;
        bottom: 1.5rem;
        right: 1.5rem;
        background: #e74c3c;
        color: #ffffff;
        padding: 0.7rem 1.2rem;
        border-radius: 6px;
        display: flex;
        align-items: center;
        gap: 0.8rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        font-weight: 500;
    }

    .error-alert button {
        background: none;
        border: none;
        color: #ffffff;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0;
        font-weight: 700;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@media (max-width: 1300px) {
        .weather-card {
            max-width: 180px;
        }
        
        .card-header h2 {
            font-size: 1.1rem;
        }
        
        .temp {
            font-size: 1.2rem;
        }
        
        .weather-desc {
            font-size: 0.8rem;
        }
        
        .weather-stats {
            font-size: 0.75rem;
        }
    }

    @@media (max-width: 1100px) {
        .weather-grid {
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .weather-card {
            max-width: 200px;
        }
    }
</style>

@code {
    private List<TopCityWeather> topCitiesWeather = new();
    private string errorMessage = "";
    private bool isLoading = false;
    private const string ApiKey = "027e44160659370f158944e22e8f23aa";
    private readonly string[] topCities = { "New York", "London", "Tokyo", "Sydney", "Paris" };

    protected override async Task OnInitializedAsync()
    {
        await LoadTopCitiesWeather();
    }

    private async Task LoadTopCitiesWeather()
    {
        isLoading = true;
        errorMessage = "";
        topCitiesWeather.Clear();
        StateHasChanged();

        try
        {
            foreach (var city in topCities)
            {
                try
                {
                    var response = await Http.GetFromJsonAsync<WeatherResponse>(
                        $"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={ApiKey}&units=metric");

                    if (response != null)
                    {
                        topCitiesWeather.Add(new TopCityWeather
                        {
                            City = response.name,
                            Temp = response.main.temp,
                            Weather = response.weather[0].description,
                            Humidity = response.main.humidity,
                            WindSpeed = response.wind.speed,
                            Pressure = response.main.pressure
                        });
                    }
                }
                catch (Exception)
                {
                    // Skip failed cities silently
                }
            }

            if (!topCitiesWeather.Any())
            {
                errorMessage = "No weather data could be retrieved";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load weather data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class TopCityWeather
    {
        public string City { get; set; } = "";
        public double Temp { get; set; }
        public string Weather { get; set; } = "";
        public int Humidity { get; set; }
        public double WindSpeed { get; set; }
        public int Pressure { get; set; }
    }

    private class WeatherResponse
    {
        public string name { get; set; } = "";
        public MainData main { get; set; } = new();
        public WeatherData[] weather { get; set; } = Array.Empty<WeatherData>();
        public WindData wind { get; set; } = new();
    }

    private class MainData
    {
        public double temp { get; set; }
        public int humidity { get; set; }
        public int pressure { get; set; }
    }

    private class WeatherData
    {
        public string description { get; set; } = "";
    }

    private class WindData
    {
        public double speed { get; set; }
    }
}